// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TEST AGAINST:
//  - duplicate emails
model User {
  id              Int               @id @default(autoincrement())
  memberSince     DateTime          @default(now())
  username        String            @db.VarChar(50) @unique
  email           String            @db.VarChar(50) @unique
  name            String?           @db.VarChar(50)
  exerciseStats   Exercise_stat[]  
  workouts        Workout[]
  @@index([username])
}

// TEST AGAINST:
//  - duplicate [userId, exerciseName, sets]
model Exercise_stat {
  // id            Int       @id @default(autoincrement())
  @@id([userId, exerciseName, sets])
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  exercise      Exercise    @relation(fields: [exerciseName], references: [name])
  exerciseName  String
  muscleGrp     Muscle_grp
  sets          Int
  weight        Int?        @default(0) @db.Integer
  reps          Int?        @default(1) @db.Integer
  updatedAt     DateTime    @updatedAt
  
  @@index([muscleGrp])
}

// TEST AGAINST:
//  - duplicate exercises
model Exercise {
  id              Int                 @id @default(autoincrement())
  name            String              @db.VarChar(30) @unique
  muscleGrp       Muscle_grp
  exerciseStats   Exercise_stat[]
  workouts        Workout[]
}

// TEST AGAINST:
//  - duplicate workouts are fine
model Workout {
  id          Int                 @id @default(autoincrement())
  name        String              @db.VarChar(30)
  createdAt   DateTime            @default(now())
  creator     User                @relation(fields: [creatorId], references: [id])
  creatorId   Int
  exercises   Exercise[]          
}

// Middle-man between Exercise & Workout
// model ExerciseOnWorkout {
//   workout     Workout     @relation(fields: [workoutId], references: [id])
//   workoutId   Int         @unique
//   exercise    Exercise    @relation(fields: [exerciseId], references: [id])
//   exerciseId  Int
//   assignedAt  DateTime    @default(now())
//   // @@index([workoutId, exerciseId])
// }

enum Muscle_grp {
  CHEST
  BACK
  LEGS
  BICEPS
  TRICEPS
  SHOULDERS
  ABS
  CARDIO
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }