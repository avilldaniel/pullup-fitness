// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TEST AGAINST:
//  - duplicate emails
model User {
  id              Int               @id @default(autoincrement())
  memberSince     DateTime          @default(now())
  username        String            @db.VarChar(50) @unique
  email           String            @db.VarChar(50) @unique
  name            String            @db.VarChar(50)
  exerciseStats   Exercise_stat[]  
  workouts        Workout[]
  create          Exercise[]
  @@index([username])
}

// TEST AGAINST:
//  - duplicate [userId, exerciseName, creatorName]
// note: this model does not allow for duplicate exercise stats which could be differentiated by
// different number of sets (ex. 3x10, 5x5, hypertrohpy); i would like to implement this eventually
model Exercise_stat {
  @@id([userName, exerciseName, creatorName, muscleGroup])
  // @@id([userName, exerciseName, creatorName])
  user          User        @relation(fields: [userName], references: [username])
  userName      String
  exercise      Exercise    @relation(fields: [exerciseName, muscleGroup, creatorName], references: [name, muscleGrp, creator])
  exerciseName  String
  muscleGroup   Muscle_grp
  creatorName   String
  sets          Int         @default(3) @db.Integer
  // weight        Int?        @default(0) @db.Integer
  weight        Decimal?    @default(0.0) @db.Decimal(5,1)
  reps          Int?        @default(0) @db.Integer
  updatedAt     DateTime    @updatedAt
  
  // @@index([userName, exerciseName])
}

// TEST AGAINST:
//  - two different users should be able to create exercise with same exercise name
//  - 
model Exercise {
  id              Int                 @id @default(autoincrement())
  name            String              @db.VarChar(30)
  // name            String              @db.VarChar(30) @unique
  muscleGrp       Muscle_grp
  exerciseStats   Exercise_stat[]
  workouts        Workout[]
  create          User                @relation(fields: [creator], references: [username])
  creator         String

  // @@unique([name, muscleGrp])
  @@unique([name, muscleGrp, creator])
}

// TEST AGAINST:
//  - duplicate workouts are fine
model Workout {
  id          Int                 @id @default(autoincrement())
  name        String              @db.VarChar(30)
  createdAt   DateTime            @default(now())
  creator     User                @relation(fields: [creatorId], references: [id])
  creatorId   Int
  exercises   Exercise[]          
}

enum Muscle_grp {
  CHEST
  BACK
  LEGS
  BICEP
  TRICEP
  SHOULDER
  GLUTES
  CORE
  CARDIO
  OTHER
}
// enum Muscle_grp {
//   CHEST
//   BACK
//   LEGS
//   BICEPS
//   TRICEPS
//   SHOULDERS
//   GLUTES
//   CORE
//   CARDIO
//   OTHER
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }