// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// add db schema(s)


// CREATE TABLE for users

model User {
  id              Int               @id @default(autoincrement())
  memberSince     DateTime          @default(now())
  name            String            @db.VarChar(30)
  email           String            @db.VarChar(50) @unique
  exerciseStats   Exercise_stats[]
}

// CREATE TABLE user_stats (
//   exercise varchar(30), [unique id]
//   weight integer, [constraint: >= 0, 0 => body weight]
//   reps integer, [constraint: >= 0]
//   updated date
// );

// figure out constraint where multi-column (userId, exerciseName, sets) @unique 

model Exercise_stats {
  // id            Int       @id @default(autoincrement())
  @@id([userId, exerciseName, sets])
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  exercise      Exercise  @relation(fields: [exerciseName], references: [name])
  exerciseName  String
  sets          Int
  weight        Int?      @default(0) @db.Integer
  reps          Int?      @default(1) @db.Integer
  lastUpdated   DateTime  @default(now())

}

// CREATE TABLE exercise (
//   exercise varchar(30), [unique id and a key for user_stats?]
//   muscle_group muscle_group
// );

model Exercise {
  id              Int     @id @default(autoincrement())
  name            String  @db.VarChar(30) @unique
  muscle_grp      Muscle_grp
  exercise_stats  Exercise_stats[]
  workouts        ExerciseOnWorkout[]
}

// CREATE TABLE user_workout

model Workout {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(30)
  exercises   ExerciseOnWorkout[]
}

model ExerciseOnWorkout {
  workout     Workout     @relation(fields: [workoutId], references: [id])
  workoutId   Int         @unique
  exercise    Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  assignedAt  DateTime    @default(now())

  // @@index([workoutId, exerciseId])
}

// CREATE TYPE muscle_group AS ENUM ('chest', 'back', 'legs', 'shoulders', 'abs', 'cardio');

enum Muscle_grp {
  CHEST
  BACK
  LEGS
  BICEPS
  TRICEPS
  SHOULDERS
  ABS
  CARDIO
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }