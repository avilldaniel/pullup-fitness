// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TEST AGAINST:
//  - duplicate emails
// model User {
model AppUser {
  id            Int             @id @default(autoincrement())
  memberSince   DateTime        @default(now())
  username      String          @unique @db.VarChar(50)
  email         String          @unique @db.VarChar(50)
  name          String          @db.VarChar(50)
  exerciseStats Exercise_stat[]
  workouts      Workout[]
  create        Exercise[]

  @@index([username])
}

// TEST AGAINST:
//  - duplicate [userId, exerciseName, creatorName]
// note: this model does not allow for duplicate exercise stats which could be differentiated by
// different number of sets (ex. 3x10, 5x5, hypertrohpy); i would like to implement this eventually
model Exercise_stat {
  // @@id([userName, exerciseName, creatorName])
  user         AppUser    @relation(fields: [userName], references: [username])
  userName     String
  exercise     Exercise   @relation(fields: [exerciseName, muscleGroup, creatorName], references: [name, muscleGrp, creator])
  exerciseName String
  muscleGroup  Muscle_grp
  creatorName  String
  sets         Int        @default(3) @db.Integer
  // weight        Int?        @default(0) @db.Integer
  weight       Decimal?   @default(0.0) @db.Decimal(5, 1)
  reps         Int?       @default(0) @db.Integer
  updatedAt    DateTime   @updatedAt

  // @@index([userName, exerciseName])

  @@id([userName, exerciseName, creatorName, muscleGroup])
}

// TEST AGAINST:
//  - two different users should be able to create exercise with same exercise name
//  - 
model Exercise {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(30)
  // name            String              @db.VarChar(30) @unique
  muscleGrp     Muscle_grp
  exerciseStats Exercise_stat[]
  workouts      Workout[]
  create        AppUser         @relation(fields: [creator], references: [username])
  creator       String

  // @@unique([name, muscleGrp])
  @@unique([name, muscleGrp, creator])
}

// TEST AGAINST:
//  - duplicate workouts are fine
model Workout {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(30)
  createdAt   DateTime   @default(now())
  creator     AppUser    @relation(fields: [creatorName], references: [username])
  creatorName String
  exercises   Exercise[]

  @@unique([name, creatorName])
}

enum Muscle_grp {
  CHEST
  BACK
  LEGS
  BICEP
  TRICEP
  SHOULDER
  GLUTES
  CORE
  CARDIO
  OTHER
}

// NextAuth - authenticate user session
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
